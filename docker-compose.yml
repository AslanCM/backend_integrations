services:
  db:
    image: mysql:8.0
    container_name: mysql_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT_EXTERNAL}:3306"
    volumes:
      - ./db:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  customers-api:
    build:
      context: .
      dockerfile: ./customers-api/Dockerfile
    container_name: customers_api
    ports:
      - "3001:3001"
    environment:
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_DATABASE}
      PORT: 3001
      SERVICE_TOKEN: ${SERVICE_TOKEN}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  orders-api:
    build:
      context: .
      dockerfile: ./orders-api/Dockerfile
    container_name: orders_api
    ports:
      - "3002:3002"
    environment:
      DB_HOST: db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_DATABASE}
      PORT: 3002
      CUSTOMERS_API_URL: http://customers-api:3001
      SERVICE_TOKEN: ${SERVICE_TOKEN}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
      customers-api:
        condition: service_started
    restart: on-failure

volumes:
  mysql-data:
